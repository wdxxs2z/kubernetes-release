#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status

# Setup common env vars and folders
source /var/vcap/packages/bosh-helpers/ctl_setup.sh 'docker'
export DOCKER_PID_FILE=${DOCKER_PID_DIR}/docker.pid

# Set the hostname
if hostname=$(public_hostname); then
  hostname $hostname
else
  hostname <%= index %>.<%= name %>.<%= spec.networks.methods(false).grep(/[^=]$/).first.to_s %>.<%= spec.deployment %>.<%= spec.dns_domain_name %>
fi

case $1 in

  start)
    pid_guard ${DOCKER_PID_FILE} ${JOB_NAME}

    # Install aufs-tools
    dpkg -i /var/vcap/packages/docker/aufs-tools_3.2+20130722-1.1_amd64.deb

    # Create Docker user & group
    create_group ${DOCKER_GROUP}
    create_user ${DOCKER_USER} ${DOCKER_GROUP}

    # Create docker data store
    if [ ! -d ${DOCKER_STORE_DIR}/docker ]; then
      mkdir -p ${DOCKER_STORE_DIR}/docker
      chown ${DOCKER_USER}:${DOCKER_GROUP} ${DOCKER_STORE_DIR}/docker
      chmod 770 ${DOCKER_STORE_DIR}/docker
    fi

    # Enable logrotate crontab
    (crontab -l | sed /docker.*logrotate/d; cat ${DOCKER_CONF_DIR}/docker_logrotate.cron) | sed /^$/d | crontab

    # Mount cgroupfs hierarchy
    $JOB_DIR/bin/cgroupfs-mount

    # Create network bridge
    if [ ! -z ${DOCKER_BRIDGE_NAME} ]; then
        set +e
        ip link delete docker0
        ip link delete ${DOCKER_BRIDGE_NAME}
        /var/vcap/packages/docker/sbin/brctl addbr ${DOCKER_BRIDGE_NAME}
        ip addr add ${DOCKER_BRIDGE_CIDR} dev ${DOCKER_BRIDGE_NAME}
        ip link set dev ${DOCKER_BRIDGE_NAME} up
        set -e
    fi
    source /run/flannel/subnet.env

    # Start Docker daemon
    exec chpst -u ${DOCKER_USER}:${DOCKER_GROUP} docker daemon \
        --group ${DOCKER_GROUP} \
        --pidfile ${DOCKER_PID_FILE} \
        --graph ${DOCKER_STORE_DIR}/docker \
        --host unix://${DOCKER_PID_DIR}/docker.sock \
        --bip ${FLANNEL_SUBNET} \
        --mtu ${FLANNEL_MTU} \
        --insecure-registry=<%= p("docker.insecure_registries").join(",") %> \
        ${DOCKER_TCP:-} \
        ${DOCKER_DEBUG:-} \
        ${DOCKER_API_ENABLE_CORS:-} \
        ${DOCKER_BRIDGE:-} \
        ${DOCKER_IPTABLES:-} \
        ${DOCKER_IPFORWARD:-} \
        ${DOCKER_ICC:-} \
        ${DOCKER_DNS_SERVERS:-} \
        ${DOCKER_DNS_DOMAINS:-} \
        ${DOCKER_MTU:-} \
        >>${DOCKER_LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
        2>>${DOCKER_LOG_DIR}/${OUTPUT_LABEL}.stderr.log
    ;;

  stop)
    # Stop containers
    docker_cmd="/var/vcap/packages/docker/bin/docker -H unix:///var/vcap/sys/run/docker/docker.sock"
    running_containers=$($docker_cmd ps -q)
    if [ -n "${running_containers}" ]; then
      $docker_cmd kill $running_containers
    fi

    # Stop Docker daemon
    kill_and_wait ${DOCKER_PID_FILE}

    # Hack: Seems Docker is not releasing the mountpoint for its store dir
    mounted=$(cat /proc/mounts | grep ${DOCKER_STORE_DIR}/docker)
    if [ ! -z "${mounted}" ]; then
        umount ${DOCKER_STORE_DIR}/docker
    fi
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
